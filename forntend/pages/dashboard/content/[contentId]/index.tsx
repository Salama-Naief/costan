import React, { FormEvent, useContext, useEffect, useState } from "react";
import { useRouter } from "next/router";
import { Store } from "../../../../utils/Store";
import {
  ChevronLeft,
  ClockHour4,
  GripVertical,
  Messages,
  Pencil,
  PlaystationTriangle,
  Stack2,
  Video,
} from "tabler-icons-react";
import DashboardNav from "../../../../components/navbar/DashboardNav";
import DashboardLeftSide from "../../../../components/dashboard/DashboardLeftSide";
import ContentType from "../../../../components/dashboard/ContentType";
import CreateTask from "../../../../components/dashboard/CreateTask";
import Head from "next/head";
import Jim from "../../../../components/dashboard/rightSide/Jim";
import WhatsNew from "../../../../components/dashboard/rightSide/WhatsNew";
import Notification from "../../../../components/dashboard/rightSide/Notification";
import Image from "next/image";
import { users } from "../../../../utils/users";
import {
  CircleDot,
  Hierarchy2,
  Point,
  Polygon,
  Script,
  Sitemap,
  SquarePlus,
  Components,
} from "tabler-icons-react";
import TasksIcons from "../../../../components/dashboard/TasksIcons";
import ProcessState from "../../../../components/dashboard/ProcessState";
import Link from "next/link";
import { GetStaticProps } from "next";
import { backend_api } from "../../../../utils/Url";
import { GetStaticPaths, InferGetStaticPropsType } from "next/types";
import Task from "../../../../components/dashboard/Task";
/*interface Contnet {
  contentType: {
    name: string;
    img: string;
  };
  createdIn: String;
  description: string;
  title: string;
  plateform: string;
  status: string;
  publishDate: string;
  id: string;
}*/

function Index({ contents, tasks }: { contents: Contnet[]; tasks: Tasks[] }) {
  const { state } = useContext(Store);
  const { content, options } = state;
  const router = useRouter();
  const [createTaskModel, setCreateTaskModel] = useState<boolean>(false);
  // const { contentId } = router.query;
  const currentContent = contents[0];
  if (!currentContent) router.push("/dashboard");

  const [title, seTitle] = useState<string>(currentContent?.attributes.title);
  const [titleEdit, seTitleEdit] = useState<boolean>(false);
  console.log("currentContent", currentContent);

  const publishedDate = () => {
    const days =
      new Date(currentContent.attributes.publishdate).getUTCDay() -
      new Date().getUTCDay();
    const hours =
      new Date(currentContent.attributes.publishdate).getUTCHours() -
      new Date().getUTCHours();
    const minutes =
      new Date(currentContent.attributes.publishdate).getTime() -
      new Date().getTime();
    console.log(days, hours, new Date(minutes).getHours());
    return days > 0
      ? days
      : 0 + "d: " + hours > "0"
      ? hours
      : 0 + "h: " + minutes > "0"
      ? hours
      : 0 + "m: " + "left";
  };

  const handleUpdateTitle = (e: FormEvent) => {
    e.preventDefault();
    seTitleEdit(false);
  };
  return (
    <div className=" h-screen flex flex-col  overflow-hidden">
      <Head>
        <title>dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <DashboardNav />
      <main className="flex flex-1 h-full ">
        <div>
          <DashboardLeftSide />
        </div>

        {/**main bar */}
        <div className="flex-1 bg-blue-50 mb-20 h-full relative p-8 overflow-y-auto pb-12">
          <div className="text-textColor-100 text-sm px-4 flex items-center space-x-1">
            <Stack2 />
            <Link href={`/dashboard/content`} passHref>
              <p className="hover:text-blue-100">content /</p>
            </Link>
            <p>{currentContent.attributes.slug}</p>
          </div>
          <div className="py-4">
            <div>
              <div className="flex items-center justify-between">
                <div className="flex items-center  space-x-2">
                  <span
                    onClick={() => router.back()}
                    className="text-sm text-textColor-100 cursor-pointer"
                  >
                    <ChevronLeft />
                  </span>
                  <ContentType
                    contentType={currentContent.attributes.contentType}
                  />
                </div>

                <p className="text-xs px-2 py-0.5 capitalize text-textColor-100 ">
                  last update:1/2/2022
                </p>
              </div>

              <div className="px-8 flex items-center justify-between">
                {titleEdit ? (
                  <form
                    className="pt-3 pb-1 w-full flex items-center space-x-1 h-fit"
                    onSubmit={(e) => handleUpdateTitle(e)}
                  >
                    <input
                      type="text"
                      onChange={(e) => seTitle(e.target.value)}
                      required
                      value={title}
                      className={`border-textColor-100 focus:border-blue-100 input flex-1`}
                      placeholder="title"
                      id="title"
                    />
                    <button
                      type="submit"
                      className="bg-blue-100 text-textColor-white px-3 py-2 rounded"
                    >
                      Save
                    </button>
                  </form>
                ) : (
                  <div className="flex items-center justify-between pt-2 w-full">
                    <p className="text-xl font-bold capitalize">
                      {currentContent.attributes.title}
                    </p>
                    <span
                      onClick={() => seTitleEdit(true)}
                      className="text-textColor-100 cursor-pointer "
                    >
                      <Pencil className="hover:text-blue-100 w-5 h-5" />
                    </span>
                  </div>
                )}
              </div>

              <div className="px-8 text-sm text-textColor-100 capitalize py-1 w-full flex items-center justify-between">
                <span> plateform:{currentContent.attributes.Plateform} </span>
                <div className="flex items-center space-x-1 text-xs text-green-100">
                  <ClockHour4 className="w-5 h-5" />
                  <span>{publishedDate()} Days to publish</span>
                </div>
              </div>
            </div>
          </div>
          {tasks.map((task) => (
            <Task task={task} contentId={currentContent.attributes.slug} />
          ))}

          <div className=" p-6 flex items-center justify-center border border-gray-100  w-full text-textColor-100">
            <div
              onClick={() => setCreateTaskModel(true)}
              className="flex space-x-1 cursor-pointer hover:text-blue-150 transition duration-200 ease-in-out"
            >
              Add task
              <SquarePlus className="w-7 h-7" />
            </div>
          </div>
          {createTaskModel && (
            <CreateTask
              contentId={currentContent.id}
              setCreateTaskModel={setCreateTaskModel}
            />
          )}
        </div>

        {/**right side bar */}
        <div className="border-l border-gray-100 w-1/4 p-6 h-full overflow-y-auto ">
          {options === "messages" ? <Messages /> : null}
          {options === "jim" ? <Jim /> : null}
          {options === "whatsNew" ? <WhatsNew /> : null}
          {options === "Notification" ? <Notification /> : null}
        </div>
      </main>
    </div>
  );
}

export const getStaticPaths: GetStaticPaths = async () => {
  let paths: { params: { contentId: string } }[] = [];

  try {
    const contentRes = await fetch(`${backend_api}/api/contents`);
    const contents = await contentRes.json();
    console.log("paths contents", contents);
    contents.data.map((content: Contnet) =>
      paths.push({ params: { contentId: content.attributes.slug } })
    );
  } catch (err) {
    console.error("paths error", err);
    paths = [{ params: { contentId: "" } }];
  }
  console.log("paths", paths);
  return { paths, fallback: false };
};

export const getStaticProps: GetStaticProps = async (context) => {
  console.log("context", context);
  const contentSlug = context.params?.contentId;
  try {
    const contentRes = await fetch(
      `${backend_api}/api/contents?filters[slug][$eq]=${contentSlug}`
    );
    const contents = await contentRes.json();

    const contentId = contents?.data[0].id;
    console.log("contentId", contentId);
    const tasksRes = await fetch(
      `${backend_api}/api/tasks?filters[contentId][$eq]=${contentId}`
    );
    const tasks = await tasksRes.json();
    console.log("content", contents.data);
    return {
      props: {
        contents: contents.data,
        tasks: tasks.data,
        errMsg: false,
      },
    };
  } catch (error) {
    console.log("error dd", error);
    return {
      props: {
        errMsg: true,
      },
    };
  }
};

export default Index;
